---
# @file raspi-main.yml
# @brief Install and configure RasPi nodes.
#
# @description This Ansible playbook is specifically designed to set up all
# Raspberry Pi nides in my  homelab environment. All RasPi nodes tun on top of
# Ubuntu Server or Rapsberry Pi OS (which is based on Debian). So this playbook
# can utilize tasks which were originally written for Raspberry Pi nodes.
#
# The purpose of this Ansible playbook is to automate the setup and configuration of
# Raspberry Pi nodes my homelab. It ensures that these machines are equipped with all
# the necessary software, configurations, and development tools required for efficient work.
#
# * The playbook includes configurations for setting up user accounts, defining user permissions, and configuring user-specific settings like ``.bashrc`` settings and SSH keys.
# * The playbook installs all the needed software required for daily and development tasks.
# * The playbook installs a comprehensive set of development tools necessary for software development and operations.
#
# This Ansible playbook streamlines the process of setting up Raspberry Pi nodes development
# purposes and (recurring) operations tasks, ensuring that they are equipped with the
# necessary software, configurations, and development tools. Additionally, it provides a
# version-controlled and easily reproducible way to maintain my  homelab environment,
# ensuring that all Raspberry Pi nodes are always up-to-date and configured according to
# specifications.
#
# == Prerequisites
#
# The ``xref:AUTO-GENERATED:components/homelab/src/main/ansible-cli-sh.adoc[components/homelab/src/main/ansible-cli.sh]``
# script, which takes care of running this playbook, expects Docker to be installed. A
# local Ansible installation is not needed. When starting on a fresh system without any
# additional packages installed, start with the ``* xref:AUTO-GENERATED:components/homelab/src/main/bootstrap/install-basics-sh.adoc[components/homelab/src/main/bootstrap/install-basics.sh]``
# script to make sure all requirements are met.

- name: Setup for group raspi
  hosts: raspi
  gather_facts: true
  become: true
  vars_files:
    - ../vars/global.yml
  vars:
    ops_project_name: ops
    ops_compose_file: "/home/{{ ansible_user }}/work/repos/sebastian-sommerfeld-io/configs/components/homelab/src/main/docker-stacks/ops/docker-compose.yml"
    portainer_min_project_name: portainer
    portainer_min_compose_file: "/home/{{ ansible_user }}/work/repos/sebastian-sommerfeld-io/configs/components/homelab/src/main/docker-stacks/portainer/docker-compose-min.yml"
  tasks:

    - ansible.builtin.import_tasks: ../tasks/common-config-bash-prompt.yml
    - ansible.builtin.import_tasks: ../tasks/common-config-bash-aliases.yml
    - ansible.builtin.import_tasks: ../tasks/common-config-create-directories.yml
    - ansible.builtin.import_tasks: ../tasks/common-install-packages.yml
    - ansible.builtin.import_tasks: ../tasks/common-config-git.yml
    - ansible.builtin.import_tasks: ../tasks/common-config-ssh-keypair.yml
    - ansible.builtin.import_tasks: ../tasks/common-install-scripts.yml
    - ansible.builtin.import_tasks: ../tasks/raspi-install-docker.yml

    - name: Config -> Clone mandatory git repositories from Github (github.com/sebastian-sommerfeld-io) via https
      ansible.builtin.git:
        repo: "https://github.com/sebastian-sommerfeld-io/{{ item }}.git"
        dest: "/home/{{ ansible_user }}/work/repos/sebastian-sommerfeld-io/{{ item }}"
      with_items:
        - configs

    - name: Service Startup -> Check if Docker Compose stack is running -> {{ ops_project_name }}
      ansible.builtin.shell: |
        docker compose -p {{ ops_project_name }} -f {{ ops_compose_file }} ps -q
      register: compose_ps_output
      changed_when: false
      check_mode: false
    - name: Service Startup -> Start Docker Compose stack if not running -> {{ ops_project_name }}
      ansible.builtin.shell: |
        docker compose -p {{ ops_project_name }} -f {{ ops_compose_file }} up -d
      when: compose_ps_output.stdout == ""

    - name: Service Startup -> Check if Docker Compose stack is running -> {{ portainer_min_project_name }}
      ansible.builtin.shell: |
        docker compose -p {{ portainer_min_project_name }} -f {{ portainer_min_compose_file }} ps -q
      register: compose_ps_output
      changed_when: false
      check_mode: false
    - name: Service Startup -> Start Docker Compose stack if not running -> {{ portainer_min_project_name }}
      ansible.builtin.shell: |
        docker compose -p {{ portainer_min_project_name }} -f {{ portainer_min_compose_file }} up -d
      when: compose_ps_output.stdout == ""

- name: Setup for single raspi node -> pihole.fritz.box
  hosts: pihole.fritz.box
  gather_facts: true
  become: true
  vars_files:
    - ../vars/global.yml
  vars:
    pihole_project_name: pihole
    pihole_compose_file: "/home/{{ ansible_user }}/work/repos/sebastian-sommerfeld-io/configs/components/homelab/src/main/docker-stacks/pihole/docker-compose.yml"
  tasks:

    - name: DUMMY
      ansible.builtin.debug:
        msg: Start Pi-hole

# - name: Service Startup -> Check if Docker Compose stack is running -> {{ pihole_project_name }}
#   ansible.builtin.shell: |
#     docker compose -p {{ pihole_project_name }} -f {{ pihole_compose_file }} ps -q
#   register: compose_ps_output
#   changed_when: false
#   check_mode: false
# - name: Service Startup -> Start Docker Compose stack if not running -> {{ ops_project_name }}
#   ansible.builtin.shell: |
#     docker compose -p {{ pihole_project_name }} -f {{ pihole_compose_file }} up -d
#   when: compose_ps_output.stdout == ""
